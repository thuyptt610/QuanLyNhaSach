/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Connect.SQLServerProvider;
import Entity.ModelPieChart;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Logger;
import java.util.logging.Level;
import javax.swing.JOptionPane;

/**
 *
 * @author ACER
 */
public class DOANHTHU extends javax.swing.JFrame {
private SQLServerProvider provider; 
  private ArrayList<ModelPieChart> models=new ArrayList<>();
    /**
     * Creates new form DOANHTHU
     */
    public DOANHTHU() {
        initComponents();
        setDefaultCloseOperation(DOANHTHU.DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);
         provider = new SQLServerProvider();
         
         // tinh tong doanh thu
         jLabelTongDT.setForeground(Color.BLUE);
        Color lightBlue = new Color(135, 206, 235);
        jLabelTongDT.setForeground(Color.WHITE);
        jLabelTongDT.setBackground(lightBlue);
        jLabelTongDT.setOpaque(true);
        
        calculateAndDisplaySum();
        // tinh so luong ton
        jLabelSLTON.setForeground(Color.BLUE);
        Color mau = new Color(135, 206, 235);
        jLabelSLTON.setForeground(Color.WHITE);
        jLabelSLTON.setBackground(mau);
        jLabelSLTON.setOpaque(true);
        
        SLTon();     
    }
    private void calculateAndDisplaySum() {
        try {
            
            SQLServerProvider provider = new SQLServerProvider();
            Connection conn = provider.open();

            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT SUM(TONGTIEN) AS tongdt FROM HOADON");

            if (rs.next()) {
             //   int sum = rs.getInt("tongdt"); 
            //String mess = "<html>DOANH THU<br>" + String.valueOf(sum) + "</html>"; 
           // jLabelTongDT.setText(String.valueOf(sum));
           double sum = rs.getDouble("tongdt"); 
                DecimalFormat df = new DecimalFormat("#,##0");
            String formattedSum = df.format(sum);
            jLabelTongDT.setText(formattedSum);
            }
            rs.close();
            stmt.close();
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
            jLabelTongDT.setText("Error calculating sum");
        }
    }
 private void SLTon() {
    try {
       
        SQLServerProvider provider = new SQLServerProvider();
        Connection conn = provider.open();

        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT HH.TENHANG, HH.SOLUONG - ISNULL(SUM(CTHD.SOLUONG), 0) AS TON "
                + "FROM HANGHOA HH LEFT JOIN CHITIETHOADON CTHD ON HH.MAHANG = CTHD.MAHANG GROUP BY HH.TENHANG, HH.SOLUONG");

        StringBuilder sb = new StringBuilder();
        
        while (rs.next()) {
            String tenHang = rs.getString("TENHANG");
            int slTon = rs.getInt("TON");
            sb.append(tenHang).append(": ").append(slTon).append("<br>");
        }
         //jLabelSLTON.setText(String.valueOf(sb));
        jLabelSLTON.setText("<html>" + sb.toString() + "</html>");

        rs.close();
        stmt.close();
        conn.close();
    } catch (Exception e) {
        e.printStackTrace();
        jLabelSLTON.setText("Error calculating stock quantity");
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ComboBoxYear = new javax.swing.JComboBox<>();
        ComboBoxMonth = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        pieChart = new Entity.PieChart();
        jLabelTongDT = new javax.swing.JLabel();
        jLabelSLTON = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtNam = new javax.swing.JTextField();
        btnTim = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel1.setText("Năm:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Tháng:");

        ComboBoxYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxYearActionPerformed(evt);
            }
        });

        ComboBoxMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxMonthActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 51, 102));
        jLabel3.setText("DOANH THU");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 0, 153));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/doanhthu_1.png"))); // NOI18N
        jLabel4.setText("Tổng Doanh Thu");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 153));
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ton.png"))); // NOI18N
        jLabel5.setText("Tổng số lượng tồn của từng mặt hàng");

        btnTim.setText("Tim");
        btnTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pieChart, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(41, 41, 41)
                        .addComponent(ComboBoxYear, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelSLTON, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelTongDT, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(189, 189, 189)
                                .addComponent(jLabel2)
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ComboBoxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtNam, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnTim)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(269, 269, 269)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel3)
                        .addGap(33, 33, 33))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTim))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ComboBoxYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(ComboBoxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelTongDT, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelSLTON, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pieChart, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ComboBoxYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxYearActionPerformed
        // TODO add your handling code here:
        if(ComboBoxYear.getSelectedIndex()>=0){
            int year=Integer.valueOf(ComboBoxYear.getSelectedItem().toString());
            try{
                ComboBoxMonth.removeAllItems();
                showMonth(year);
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_ComboBoxYearActionPerformed

    private void ComboBoxMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxMonthActionPerformed
        // TODO add your handling code here:
        if (ComboBoxMonth.getSelectedIndex() >= 0 && ComboBoxYear.getSelectedIndex() >= 0) {
            int year = Integer.parseInt(ComboBoxYear.getSelectedItem().toString());
            int month = Integer.parseInt(ComboBoxMonth.getSelectedItem().toString());
            try {
                showData(year, month);
            } catch (SQLException ex) {
                Logger.getLogger(DOANHTHU.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_ComboBoxMonthActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
         try{
            //showMonth(y);
            showYear();
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowOpened

    private void btnTimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimActionPerformed
        // TODO add your handling code here:
         try {
        
        String yearText = txtNam.getText().trim();
        
       
        if (!yearText.isEmpty()) {
            int year = Integer.parseInt(yearText);

            
            boolean hasData = showDataNam(year);
            
            
            if (!hasData) {
                JOptionPane.showMessageDialog(this, "Không có dữ liệu cho năm " + year, "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            
            JOptionPane.showMessageDialog(this, "Vui lòng nhập năm hợp lệ!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        }
    } catch (NumberFormatException e) {
      
        JOptionPane.showMessageDialog(this, "Vui lòng nhập năm là một số hợp lệ!", "Thông báo", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException e) {
        
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Lỗi khi truy vấn dữ liệu từ cơ sở dữ liệu!", "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnTimActionPerformed
private void showYear() throws SQLException{
     String query = "SELECT DISTINCT FORMAT(NGAYBAN, 'yyyy') AS yearNumber FROM HOADON";
    try {
        provider.open();
        ResultSet rs = provider.executeQuery(query);
        while (rs.next()) {
            int year = rs.getInt("yearNumber");
            ComboBoxYear.addItem(String.valueOf(year));
        }
    } finally {
        provider.close();
    }
    }
    private void showMonth(int year) throws SQLException{
         String query = "SELECT DISTINCT FORMAT(NGAYBAN, 'MM') AS MonthNumber FROM HOADON";
        try {
            provider.open();
            ResultSet rs = provider.executeQuery(query);
            while (rs.next()) {
               // String monthtext=rs.getString("MonthText");
                int month = rs.getInt("MonthNumber");
             String formattedMonth = String.format("%02d", month); 
            ComboBoxMonth.addItem(formattedMonth);
           // ComboBoxYear.addItem(new Model_month(month, monthtext));
            }
        } finally {
            provider.close(); 
        }
    }
    private void showData(int year, int month) throws SQLException {
   /* String query = "SELECT cthd.mahang, SUM(cthd.soluong * cthd.dongia) AS TotalValue " +
                   "FROM hoadon hd " +
                   "INNER JOIN chitiethoadon cthd ON cthd.mahd = hd.mahd " +
                   "WHERE FORMAT(NGAYBAN, 'MM') = ? AND FORMAT(NGAYBAN, 'yyyy') = ? " +
                   "GROUP BY cthd.mahang";
      */
   String query = "SELECT hh.TENHANG, SUM(cthd.SOLUONG * cthd.DONGIA * (1 - cthd.GIAMGIA / 100.0)) AS TINHTIEN " +
               "FROM HOADON hd " +
               "INNER JOIN CHITIETHOADON cthd ON hd.MAHD = cthd.MAHD " +
               "INNER JOIN HANGHOA hh ON cthd.MAHANG = hh.MAHANG " +
               "WHERE FORMAT(NGAYBAN, 'MM') = ? AND FORMAT(NGAYBAN, 'yyyy') = ? " +
               "GROUP BY hh.TENHANG";
    PreparedStatement statement = null;
    ResultSet rs = null;

    try {
        Connection connection = provider.open();
        statement = connection.prepareStatement(query);
        statement.setString(1, String.format("%02d", month));
        statement.setString(2, String.valueOf(year));

        // Xóa dữ liệu cũ trong PieChart trước khi thêm dữ liệu mới
        pieChart.clearData();
        models.clear(); 

        rs = statement.executeQuery();

        while (rs.next()) {
            String productName = rs.getString("TENHANG");
            double totalValue = rs.getDouble("TINHTIEN");
            Color color = getColor(); 

            pieChart.addData(new ModelPieChart(productName, totalValue, color));
            models.add(new ModelPieChart(productName, totalValue, color)); 
        }

        pieChart.repaint();
    } finally {
      
        if (rs != null) {
            rs.close();
        }
        if (statement != null) {
            statement.close();
        }
    }
}
// nam
    private boolean showDataNam(int year) throws SQLException {
    String query = "SELECT hh.TENHANG, SUM(cthd.SOLUONG * cthd.DONGIA * (1 - cthd.GIAMGIA / 100.0)) AS TINHTIEN " +
                   "FROM HOADON hd " +
                   "INNER JOIN CHITIETHOADON cthd ON hd.MAHD = cthd.MAHD " +
                   "INNER JOIN HANGHOA hh ON cthd.MAHANG = hh.MAHANG " +
                   "WHERE FORMAT(NGAYBAN, 'yyyy') = ? " +
                   "GROUP BY hh.TENHANG";
    PreparedStatement statement = null;
    ResultSet rs = null;
    boolean hasData = false; 

    try {
        Connection connection = provider.open();
        statement = connection.prepareStatement(query);
        statement.setString(1, String.valueOf(year));

       
        pieChart.clearData();
        models.clear(); 

        rs = statement.executeQuery();

        while (rs.next()) {
            hasData = true; 
            String productName = rs.getString("TENHANG");
            double totalValue = rs.getDouble("TINHTIEN");
            Color color = getColor(); 

            pieChart.addData(new ModelPieChart(productName, totalValue, color));
            models.add(new ModelPieChart(productName, totalValue, color)); 
        }

        pieChart.repaint();
    } finally {
        if (rs != null) {
            rs.close();
        }
        if (statement != null) {
            statement.close();
        }
    }
    return hasData; 
}


   private Color getColor() {
    Color[] colors = new Color[]{new Color(255, 102, 102), new Color(58, 55, 227), new Color(94, 217, 214), new Color(29, 184, 85), new Color(206, 215, 33)};
    return colors[models.size() % colors.length]; 
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DOANHTHU.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DOANHTHU.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DOANHTHU.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DOANHTHU.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DOANHTHU().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxMonth;
    private javax.swing.JComboBox<String> ComboBoxYear;
    private javax.swing.JButton btnTim;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelSLTON;
    private javax.swing.JLabel jLabelTongDT;
    private Entity.PieChart pieChart;
    private javax.swing.JTextField txtNam;
    // End of variables declaration//GEN-END:variables
}
